name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_TAG: ${{ github.repository }}
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build
        uses: docker/build-push-action@v6
        with:
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/docker-image.tar
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/docker-image.tar


  lint:
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup env file
        run: cp .env.ci .env

      - name: Prepare lint runner
        run: docker compose run --rm --build web bin/bundle install

      - name: Scan for security vulnerabilities in Ruby dependencies
        run: |
          docker compose run --rm web bin/bundle exec bundler-audit --update
          docker compose run --rm web bin/brakeman -q -w2 --no-pager

      - name: Run linters
        run: docker compose run --rm web bin/rubocop --parallel


  test:
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      
      - name: Load image
        run: |
          docker load --input /tmp/docker-image.tar
          docker image ls -a 

      - name: Setup env file
        run: cp .env.ci .env

      - name: Prepare test runner
        run: RAILS_ENV=test docker compose run --rm --build web bin/setup-test-runner

      - name: Start containers
        run: docker compose up -d --wait ci

      - name: Run tests
        run: RAILS_ENV=test docker compose run --rm web bin/rake cucumber


  release:
    runs-on: ubuntu-latest
    # if: github.event_name != 'pull_request'
    needs: [test, lint]

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      
      - name: Load image
        run: |
          docker load --input /tmp/docker-image.tar
          docker image ls -a 

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_TAG }}

      - name: Push
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          # tags: ${{ env.REGISTRY }}/${{ env.IMAGE_TAG }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_TAG}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
